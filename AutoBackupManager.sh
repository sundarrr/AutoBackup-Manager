#!/bin/bash# Flag to track whether initial backup has been performedinitial_backup_done=false# Function to perform initial backupperform_initial_backup() {    # Generate timestamp for logging    timestamp=$(date +"%Y-%m-%d %T")    # Create backup directory if it doesn't exist    backup_dir=~/home/backup/cbw24    mkdir -p "$backup_dir"    # Create tar file with timestamp, excluding hidden files    tar_file="$backup_dir/cb$(date +"%Y%m%d%H%M%S").tar"    tar -cf "$tar_file" --exclude=".*" /home/$USER/* > /dev/null 2>&1    # Log backup details to backup.log    echo "$timestamp - $tar_file" >> ~/home/backup/backup.log        # Store timestamp of initial backup    cb_backup_timestamp=$(date -r "$tar_file" +"%Y-%m-%d %T")        # Initialize timestamp of the last incremental backup    ib_backup_timestamp="$cb_backup_timestamp"    # Set initial_backup_done flag to true    initial_backup_done=true}# Function to perform incremental backupperform_incremental_backup() {    # Check if initial backup has been performed    if ! $initial_backup_done; then        return    fi    # Generate timestamp for logging    timestamp=$(date +"%Y-%m-%d %T")    # Find files modified or created after the previous backup (cb.tar or ib.tar),    # excluding system-generated files    modified_files=$(find /home/$USER -type f -newermt "$ib_backup_timestamp" ! -name "cb*.tar" ! -name "ib*.tar" ! -name "db*.tar" ! -name "backup.log" ! -name "*.xbel")    # Check if there are any modified files    if [ -n "$modified_files" ]; then        # Create backup directory if it doesn't exist        backup_dir=~/home/backup/ib24        mkdir -p "$backup_dir"        # Create tar file with timestamp for incremental backup        tar_file="$backup_dir/ib$(date +"%Y%m%d%H%M%S").tar"        tar -cf "$tar_file" $modified_files > /dev/null 2>&1        # Log backup details to backup.log        echo "$timestamp - $tar_file" >> ~/home/backup/backup.log        # Update the timestamp of the last incremental backup        ib_backup_timestamp=$(date -r "$tar_file" +"%Y-%m-%d %T")    else        # Log timestamp and message indicating no changes        echo "$timestamp - No changes since last backup" >> ~/home/backup/backup.log    fi}# Function to perform differential backupperform_differential_backup() {    # Generate timestamp for logging    timestamp=$(date +"%Y-%m-%d %T")    # Find files modified or created after the initial backup (cb.tar),    # excluding system-generated files    modified_files=$(find /home/$USER -type f -newermt "$cb_backup_timestamp" ! -name "cb*.tar" ! -name "ib*.tar" ! -name "db*.tar" ! -name "backup.log" ! -name "*.xbel")    # Check if there are any modified files    if [ -n "$modified_files" ]; then        # Create backup directory if it doesn't exist        backup_dir=~/home/backup/db24        mkdir -p "$backup_dir"        # Create tar file with timestamp for differential backup        tar_file="$backup_dir/db$(date +"%Y%m%d%H%M%S").tar"        tar -cf "$tar_file" $modified_files > /dev/null 2>&1        # Log backup details to backup.log        echo "$timestamp - $tar_file" >> ~/home/backup/backup.log        ib_backup_timestamp=$(date -r "$tar_file" +"%Y-%m-%d %T")    else        # Log timestamp and message indicating no changes        echo "$timestamp - No changes since last backup" >> ~/home/backup/backup.log    fi}# Continuously run backup with a 2-minute intervalwhile true; do    perform_initial_backup    sleep 20  # Sleep for 2 minutes (120 seconds)    perform_incremental_backup    sleep 20  # Sleep for 2 minutes (120 seconds)    # Perform another incremental backup    perform_incremental_backup    sleep20    # Perform differential backup after both incremental backups    perform_differential_backup    sleep 20        perform_incremental_backup    sleep 20    # Update the timestamp of the last differential backup    db_backup_timestamp=$(date +"%Y-%m-%d %T")done